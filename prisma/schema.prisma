// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @unique @default(autoincrement())
  username String    @unique
  tasks    Task[]    @relation("CreatedTasks")
  comments Comment[]
  assignee Assignee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Task {
  id          Int          @id @unique @default(autoincrement())
  title       String      
  description String
  dueDate     DateTime?
  priority    Int?          // 1-low, 2-medium, 3-high
  storyPoint  Float?
  status      TaskStatus  @default(OPEN)
  createdBy   User         @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById Int
  comments    Comment[]
  labels      TaskLabel[]
  assignees   Assignee[]
  activities  TaskActivity[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  @@map("tasks")
}

model Comment {
  id        Int       @id @unique @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  content   String
  activity  TaskActivity? 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("comments")
}

model Label {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  tasks     TaskLabel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("labels")
}


model TaskLabel {
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  label     Label     @relation(fields: [labelId], references: [id])
  labelId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([taskId, labelId])

  @@map("task_labels")
}

model Assignee {
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([userId, taskId])

  @@map("assignees")
}


model TaskActivity {
  id          Int        @id @default(autoincrement())
  task        Task       @relation(fields: [taskId], references: [id])
  taskId      Int
  action      String
  comment     Comment?   @relation(fields: [commentId], references: [id])
  commentId   Int?      @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?

  @@map("task_activities")
}


enum TaskStatus {
  OPEN
  ASSIGNED
  CLOSE
}